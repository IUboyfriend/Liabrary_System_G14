package View.Admin;

import Controller.AnalysisReportController;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.ResultSet;
import java.sql.SQLException;


public class AnalysisReport {
    private JPanel JPSearchBar;
    private JComboBox ComboBoxOption;
    private JButton JBSearch;
    private JButton JBBack;
    private JPanel JPTable;
    private JTable JTableSearch;

    JPanel JPMain;

    String selectedItem = "Popular Book";

    public AnalysisReport(JFrame frame) {

        String[] titles = {"Ranking", "BOOKNAME", "Borrows, desires and reserves"};
        String[][] data = {};
        DefaultTableModel model = new DefaultTableModel(data, titles);
        JTableSearch.setModel(model);
        JScrollPane s = new JScrollPane(JTableSearch);
        JPMain.add(s, BorderLayout.CENTER);

        frame.setTitle("Analysis Report");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 350);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        JBBack.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.setContentPane(new AdminOperation(frame).JPMain);
            }
        });

        ComboBoxOption.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (ItemEvent.SELECTED == e.getStateChange()) {
                    selectedItem = e.getItem().toString();
                }
            }
        });
        JBSearch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                model.setRowCount(0);
                String searchType = selectedItem;
                String selectedItem = "";
                if (searchType.equals("Popular Book"))
                    selectedItem = "BOOKNAME";
                else if (searchType.equals("Popular Publisher"))
                    selectedItem = "PUBLISHER";
                else if (searchType.equals("Popular Category"))
                    selectedItem = "CATEGORY";
                else if (searchType.equals("Popular Author"))
                    selectedItem = "AUTHOR";

                JTableHeader th = JTableSearch.getTableHeader();
                TableColumnModel tcm = th.getColumnModel();
                TableColumn tc = tcm.getColumn(1);
                tc.setHeaderValue("Hottest " + selectedItem.toLowerCase());
                th.repaint();

                try {
                    ResultSet rset = AnalysisReportController.generateReport(selectedItem);
                    Integer ranking = 0;
                    while (rset.next()) {
                        ranking++;
                        String[] row = {ranking.toString(), rset.getString(1), rset.getString(2)};
                        model.addRow(row);
                    }
                } catch (SQLException ex) {
                    throw new RuntimeException(ex);
                }

            }
        });
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        JPMain = new JPanel();
        JPMain.setLayout(new BorderLayout(0, 0));
        JPSearchBar = new JPanel();
        JPSearchBar.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 3, new Insets(20, 20, 20, 20), -1, -1));
        JPSearchBar.setBackground(new Color(-7086643));
        JPMain.add(JPSearchBar, BorderLayout.NORTH);
        ComboBoxOption = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Popular Book");
        defaultComboBoxModel1.addElement("Popular Publisher");
        defaultComboBoxModel1.addElement("Popular Category");
        defaultComboBoxModel1.addElement("Popular Author");
        ComboBoxOption.setModel(defaultComboBoxModel1);
        JPSearchBar.add(ComboBoxOption, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(60, -1), null, 0, false));
        JBSearch = new JButton();
        JBSearch.setBackground(new Color(-13345850));
        JBSearch.setForeground(new Color(-723724));
        JBSearch.setText("Generate Report");
        JPSearchBar.add(JBSearch, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        JBBack = new JButton();
        JBBack.setBackground(new Color(-3374631));
        JBBack.setForeground(new Color(-723724));
        JBBack.setText("Back\n");
        JPSearchBar.add(JBBack, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        JPTable = new JPanel();
        JPTable.setLayout(new BorderLayout(0, 0));
        JPMain.add(JPTable, BorderLayout.CENTER);
        JTableSearch = new JTable();
        JPTable.add(JTableSearch, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return JPMain;
    }

}
