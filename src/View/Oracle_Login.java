package View;

import Controller.OracleDB;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Locale;

public class Oracle_Login {
    private JPanel headerPanel;
    private JLabel headerJLabel;
    private JPanel JPContent;
    private JPanel JPInput;
    private JPanel JP01;
    private JTextField JTAccount;
    private JLabel JLableID;
    private JPanel JP02;
    private JLabel JPPassword;
    private JPasswordField JPasswordFieldPassword;
    private JPanel JPButton;
    private JButton JBLOGIN;
    public JPanel JPMain;

    static OracleDB oracleDB;

    public Oracle_Login(JFrame frame) {

        JBLOGIN.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                String account = JTAccount.getText();
                String password = String.valueOf(JPasswordFieldPassword.getPassword());
                oracleDB = new OracleDB(account, password);
                String query = "SELECT * FROM BOOK WHERE BOOKID = 123";
                ResultSet rset = null;
                try {
                    rset = oracleDB.executeQuery(query);
                    while (rset.next()) {
                        System.out.println(rset.getString("BOOKNAME"));
                    }
                } catch (SQLException ex) {
                    throw new RuntimeException(ex);
                }

                frame.setContentPane(new Initial(frame).JPMain);
            }
        });

    }


    public static void main(String[] args) {
        JFrame frame = new JFrame("Oracle_Login");
        frame.setContentPane(new Oracle_Login(frame).JPMain);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 250);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                try {
                    oracleDB.closeConnection();
                    System.out.println("Successful");
                } catch (SQLException ex) {
                    System.out.println("fail");
                    throw new RuntimeException(ex);
                }
            }
        });
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        JPMain = new JPanel();
        JPMain.setLayout(new BorderLayout(0, 0));
        headerPanel = new JPanel();
        headerPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        headerPanel.setBackground(new Color(-7086643));
        JPMain.add(headerPanel, BorderLayout.NORTH);
        headerPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        headerJLabel = new JLabel();
        Font headerJLabelFont = this.$$$getFont$$$("Arial Black", -1, 26, headerJLabel.getFont());
        if (headerJLabelFont != null) headerJLabel.setFont(headerJLabelFont);
        headerJLabel.setForeground(new Color(-394759));
        headerJLabel.setHorizontalAlignment(10);
        headerJLabel.setText("Connect to Your Oracle Server");
        headerPanel.add(headerJLabel);
        JPContent = new JPanel();
        JPContent.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        JPContent.setBackground(new Color(-10586488));
        JPMain.add(JPContent, BorderLayout.CENTER);
        JPContent.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        JPInput = new JPanel();
        JPInput.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(25, 0, 25, 0), -1, -1));
        JPInput.setBackground(new Color(-6828067));
        JPContent.add(JPInput, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        JP01 = new JPanel();
        JP01.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), 10, 10));
        JP01.setBackground(new Color(-6828067));
        JPInput.add(JP01, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        JTAccount = new JTextField();
        JP01.add(JTAccount, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        JLableID = new JLabel();
        Font JLableIDFont = this.$$$getFont$$$(null, -1, 18, JLableID.getFont());
        if (JLableIDFont != null) JLableID.setFont(JLableIDFont);
        JLableID.setText("Oracle Account:");
        JP01.add(JLableID, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        JP02 = new JPanel();
        JP02.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(22, 0, 0, 0), 10, 10));
        JP02.setBackground(new Color(-6828067));
        JPInput.add(JP02, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        JPPassword = new JLabel();
        Font JPPasswordFont = this.$$$getFont$$$(null, -1, 18, JPPassword.getFont());
        if (JPPasswordFont != null) JPPassword.setFont(JPPasswordFont);
        JPPassword.setText("      Password:    ");
        JP02.add(JPPassword, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        JPasswordFieldPassword = new JPasswordField();
        JP02.add(JPasswordFieldPassword, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        JPButton = new JPanel();
        JPButton.setLayout(new BorderLayout(0, 0));
        JPButton.setBackground(new Color(-10982490));
        JPContent.add(JPButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, new Dimension(0, 35), null, 0, false));
        JBLOGIN = new JButton();
        JBLOGIN.setForeground(new Color(-4498354));
        JBLOGIN.setText("Log in");
        JPButton.add(JBLOGIN, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return JPMain;
    }

}
