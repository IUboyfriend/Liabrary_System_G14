package View.User;

import Controller.NewUserController;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;

public class NewUser {
    public JPanel JPMain;
    private JTextField JTUserID;
    private JTextField JTNickName;
    private JTextField JTPassword;
    private JTextField JTPassword2;
    private JTextField JTEmail;
    private JLabel JLUserID;
    private JLabel JLNickName;
    private JLabel JLPassword;
    private JLabel JLPasswordConfirm;
    private JLabel JLEmail;
    private JButton JBBack;
    private JButton JBsubmit;
    private JPasswordField passwordField1;
    private JPasswordField passwordField2;

    private String userID;
    private String nickName;
    private String password;
    private String password2;
    private String Email;


    public NewUser(JFrame frame) {
        frame.setTitle("New User");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 250);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        JBsubmit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                userID = JTUserID.getText();
                nickName = JTNickName.getText();
                password = String.valueOf(passwordField1.getPassword());
                password2 = String.valueOf(passwordField2.getPassword());
                System.out.print(password);
                System.out.println(password2);
                Email = JTEmail.getText();
                String message = checkEmpty();
                if (!message.equals("")) {
                    JOptionPane.showMessageDialog(null, message);
                } else if (!password.equals(password2)) {
                    JOptionPane.showMessageDialog(null, "The two passwords you entered were inconsistent");
                } else {
                    NewUserController newUserController = new NewUserController();
                }
            }
        });
    }


    private String checkEmpty() {
        if (userID.equals(""))
            return "Your user ID cannot be empty!";
        if (nickName.equals(""))
            return "Your nick name cannot be empty!";
        if (password.equals(""))
            return "Your password connot be empty!";
        if (password2.equals(""))
            return "Please input your password again!";
        if (Email.equals(""))
            return "Your Email cannot be empty!";
        return "";
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        JPMain = new JPanel();
        JPMain.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        JPMain.setBackground(new Color(-8806227));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 2, new Insets(20, 20, 20, 20), -1, -1));
        panel1.setBackground(new Color(-7086643));
        Font panel1Font = this.$$$getFont$$$(null, -1, 16, panel1.getFont());
        if (panel1Font != null) panel1.setFont(panel1Font);
        JPMain.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        JLUserID = new JLabel();
        Font JLUserIDFont = this.$$$getFont$$$(null, -1, 16, JLUserID.getFont());
        if (JLUserIDFont != null) JLUserID.setFont(JLUserIDFont);
        JLUserID.setForeground(new Color(-460552));
        JLUserID.setText("User ID");
        panel1.add(JLUserID, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        JTUserID = new JTextField();
        panel1.add(JTUserID, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(150, -1), null, 0, false));
        JLNickName = new JLabel();
        Font JLNickNameFont = this.$$$getFont$$$(null, -1, 16, JLNickName.getFont());
        if (JLNickNameFont != null) JLNickName.setFont(JLNickNameFont);
        JLNickName.setForeground(new Color(-394759));
        JLNickName.setText("Nick Name");
        panel1.add(JLNickName, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        JTNickName = new JTextField();
        panel1.add(JTNickName, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(150, -1), null, 0, false));
        JLPassword = new JLabel();
        Font JLPasswordFont = this.$$$getFont$$$(null, -1, 16, JLPassword.getFont());
        if (JLPasswordFont != null) JLPassword.setFont(JLPasswordFont);
        JLPassword.setForeground(new Color(-657931));
        JLPassword.setText("Password");
        panel1.add(JLPassword, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        JLPasswordConfirm = new JLabel();
        Font JLPasswordConfirmFont = this.$$$getFont$$$(null, -1, 16, JLPasswordConfirm.getFont());
        if (JLPasswordConfirmFont != null) JLPasswordConfirm.setFont(JLPasswordConfirmFont);
        JLPasswordConfirm.setForeground(new Color(-526345));
        JLPasswordConfirm.setText("Password Confirm");
        panel1.add(JLPasswordConfirm, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        JLEmail = new JLabel();
        Font JLEmailFont = this.$$$getFont$$$(null, -1, 16, JLEmail.getFont());
        if (JLEmailFont != null) JLEmail.setFont(JLEmailFont);
        JLEmail.setForeground(new Color(-394759));
        JLEmail.setText("Email");
        panel1.add(JLEmail, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        JTEmail = new JTextField();
        panel1.add(JTEmail, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(150, -1), null, 0, false));
        passwordField1 = new JPasswordField();
        panel1.add(passwordField1, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        passwordField2 = new JPasswordField();
        panel1.add(passwordField2, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.CENTER, 40, 5));
        panel2.setBackground(new Color(-6828067));
        JPMain.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        JBsubmit = new JButton();
        JBsubmit.setBackground(new Color(-9017150));
        JBsubmit.setText("Submit");
        panel2.add(JBsubmit);
        JBBack = new JButton();
        JBBack.setBackground(new Color(-15022631));
        JBBack.setText("Back");
        panel2.add(JBBack);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return JPMain;
    }

}
